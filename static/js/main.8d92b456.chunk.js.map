{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","store/app/app.action.js","store/app/constants.js","serviceWorker.js","store/app/app.reducer.js","store/store.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","key","SearchBox","searchChange","for","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","PureComponent","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","getRobots","searchField","onSearchChange","filteredRobots","filter","match","RegExp","React","connect","setSearchFieldReducer","requestRobotsReducer","isPending","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","logger","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8d92b456.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n  return (\n  \t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-5\">\n\t  <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\n\t  <div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t  </div>\n\t</div>\n  )\n};\n\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({robots}) => {\n  return (\n  \t<div>\n\t  {robots.map((robot)=> {\n\t\treturn <Card key={robot.id} name={robot.name} id={robot.id} email={robot.email}/>\n\t  })}\n\t</div>\n  )\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n  \t<div className=\"pa-2\">\n\t  <label for=\"searchRobots\">Find your robot : </label>\n\t  <input\n\t\t  id=\"searchRobots\"\n\t\t  className=\"pa3 ba b--green bg-lightest-blue\"\n\t\t  type=\"search\"\n\t\t  placeholder=\"search robots\"\n\t\t  onChange={searchChange}\n\t  />\n  \t</div>\n  )\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n  \t<div style={{overflowY :'scroll', border: '1px solid black', height: '500px'}}>\n\t  {props.children}\n\t</div>\n  )\n};\n\nexport default Scroll;\n","import React, {PureComponent} from 'react';\n\nclass Header extends PureComponent {\n\n  render() {\n    return <h1 className=\"f2\">RoboFriends</h1>\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError : false,\n\t}\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({hasError: true});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops, there's an error</h1>\n\t}\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css'\nimport connect from 'react-redux/es/connect/connect';\nimport {setSearchField, requestRobots} from '../store/app/app.action';\n\n\nconst mapStateToProps = (state) => ({\n  searchField: state.setSearchFieldReducer.searchField,\n  robots: state.requestRobotsReducer.robots,\n  isPending: state.requestRobotsReducer.isPending,\n  error: state.requestRobotsReducer.error,\n});\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  getRobots: () => dispatch(requestRobots()),\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.getRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots} = this.props;\n\n    const filteredRobots = robots.filter(robot =>\n        robot.name.match(new RegExp(searchField,'i'))\n    );\n\n    return (\n        <div className=\"tc\">\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, SET_SEARCH_FIELD} from './constants';\n\nexport const setSearchField = (text) => ({ type : SET_SEARCH_FIELD, payload: text });\nexport const requestRobots = () => (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n\t  .then(res => res.json())\n\t  .then((data) => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t  .catch((err) => dispatch({type:REQUEST_ROBOTS_FAILED, payload: err}))\n};\n","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, SET_SEARCH_FIELD} from './constants';\n\n\nconst initialState = {\n  searchField : '',\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\n\n\nexport const setSearchFieldReducer = (state = initialState, action) => {\n  switch (action.type) {\n\tcase SET_SEARCH_FIELD:\n\t  return {...state, ...action.payload };\n\tdefault:\n\t  return {...state};\n  }\n};\n\nexport const requestRobotsReducer = (state = initialState, action) => {\n  switch (action.type) {\n\tcase REQUEST_ROBOTS_PENDING:\n\t  return {...state, isPending: true};\n\tcase REQUEST_ROBOTS_SUCCESS:\n\t  return {...state, robots: action.payload, isPending: false};\n\tcase REQUEST_ROBOTS_FAILED:\n\t  return {...state, error: action.payload, isPending: false};\n\tdefault:\n\t  return state;\n  }\n};\n","import {combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport {setSearchFieldReducer, requestRobotsReducer} from './app/app.reducer';\n\n\nconst rootReducer = combineReducers({setSearchFieldReducer, requestRobotsReducer});\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {Provider} from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}